name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-development:
    name: 'Build Infrastructure for Development'
    runs-on: ubuntu-latest
    environment: development  # Set environment for development

    defaults:
      run:
        shell: bash
    
    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Authenticate with Azure using the service principal credentials
    - name: Configure Azure Credentials
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        environment: azurecloud

    # Initialize Terraform with backend configuration
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=development.tfstate" \
          -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file="development.terraform.tfvars" -out=development.tfplan -lock=true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

  deploy-development:
    name: 'Deploy Development Infrastructure'
    needs: build-development  # Ensures the deploy job runs after build job
    runs-on: ubuntu-latest
    environment: development
    
    defaults:
      run:
       shell: bash
    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}
    
    steps:
      
        # Checkout the repository to the GitHub Actions runner (if needed)
    - name: Checkout
      uses: actions/checkout@v3
    
        # Install the latest version of Terraform CLI (if needed)
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
        # Authenticate with Azure using the service principal credentials
    - name: Configure Azure Credentials
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
        environment: azurecloud
    
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=development.tfstate" \
          -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: List downloaded files
      run: ls -al /home/runner/work/ct-infra/ct-infra
    
      # Apply the Terraform plan to deploy infrastructure
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve /home/runner/work/ct-infra/ct-infra/development.tfplan
    

  build-staging:
    name: 'Build Infrastructure for Staging'
    runs-on: ubuntu-latest
    environment: staging  # Set environment for staging
    needs: [build-development, deploy-development]  # Ensure this job runs after the development build job

    defaults:
      run:
        shell: bash
    
    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Authenticate with Azure using the service principal credentials
    - name: Configure Azure Credentials
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
        environment: azurecloud

    # Initialize Terraform with backend configuration
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=staging.tfstate" \
          -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file="staging.terraform.tfvars" -out=staging.tfplan -lock=true

  deploy-staging:
    name: 'Deploy Staging Infrastructure'
    needs: build-staging  # Ensures the deploy job runs after build job
    runs-on: ubuntu-latest
    environment: staging
        
    defaults:
      run:
        shell: bash
    
    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}
        
    steps:
            # Checkout the repository to the GitHub Actions runner (if needed)
      - name: Checkout
        uses: actions/checkout@v3
        
            # Install the latest version of Terraform CLI (if needed)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
            # Authenticate with Azure using the service principal credentials
      - name: Configure Azure Credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
      
      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
            -backend-config="key=staging.tfstate" \
            -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
      
      - name: List downloaded files
        run: ls -al /home/runner/work/ct-infra/ct-infra
      
            # Apply the Terraform plan to deploy infrastructure

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve /home/runner/work/ct-infra/ct-infra/staging.tfplan


  build-production:
    name: 'Build Infrastructure for Production'
    runs-on: ubuntu-latest
    environment: production  # Set environment for production
    needs: [build-staging, deploy-staging]   # Ensure this job runs after the staging build job

    defaults:
      run:
        shell: bash

    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Authenticate with Azure using the service principal credentials
    - name: Configure Azure Credentials
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
        environment: azurecloud

    # Initialize Terraform with backend configuration
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=production.tfstate" \
          -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file="production.terraform.tfvars" -out=production.tfplan -lock=true


  deploy-production:
    name: 'Deploy Production Infrastructure'
    needs: build-production  # Ensures the deploy job runs after build job
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
    env:
      TF_RESOURCE_GROUP: ${{ secrets.TF_RESOURCE_GROUP }}
      TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
      TF_ACCESS_KEY: ${{ secrets.TF_ACCESS_KEY }}

    steps:
    # Checkout the repository to the GitHub Actions runner (if needed)
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI (if needed)
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Authenticate with Azure using the service principal credentials
    - name: Configure Azure Credentials
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
        environment: azurecloud
    
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=production.tfstate" \
          -backend-config="access_key=${{ env.TF_ACCESS_KEY }}"

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan
    
    - name: List downloaded files
      run: ls -al /home/runner/work/ct-infra/ct-infra
    
          # Apply the Terraform plan to deploy infrastructure
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve /home/runner/work/ct-infra/ct-infra/production.tfplan